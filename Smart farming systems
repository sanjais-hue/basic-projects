#include <WiFi.h>  // Library for Wi-Fi connectivity
#include <Arduino.h>  // Library for Arduino functions
#include <DHT.h>  // Library for DHT11 temperature and humidity sensor
#include <PubSubClient.h>  // Library for MQTT communication
#include <Adafruit_BME280.h>  // Library for BME280 temperature, humidity, and pressure sensor

// Define Wi-Fi credentials
const char* ssid = "your_wifi_ssid";
const char* password = "your_wifi_password";

// Define pins for sensors and actuators
#define DHT_PIN 2  // DHT11 temperature and humidity sensor
#define BME_PIN 3  // BME280 temperature, humidity, and pressure sensor
#define SOIL_MOISTURE_PIN A0  // Soil moisture sensor
#define WATER_PUMP_PIN 4  // Water pump actuator
#define LED_PIN 5  // LED indicator

// Define MQTT broker credentials
const char* mqttServer = "your_mqtt_broker_ip";
const char* mqttTopic = "smart_farming";

WiFiClient espClient;
PubSubClient client(espClient);

DHT dht(DHT_PIN, DHT11);
Adafruit_BME280 bme;

void setup() {
  // Initialize Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
  }
  Serial.println("Connected to Wi-Fi");

  // Initialize sensors and actuators
  dht.begin();
  bme.begin();
  pinMode(SOIL_MOISTURE_PIN, INPUT);
  pinMode(WATER_PUMP_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);

  // Connect to MQTT broker
  client.setServer(mqttServer, 1883);
}

void loop() {
  // Read temperature and humidity values from DHT11 sensor
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Read temperature, humidity, and pressure values from BME280 sensor
  float bmeTemperature = bme.readTemperature();
  float bmeHumidity = bme.readHumidity();
  float bmePressure = bme.readPressure();

  // Read soil moisture value
  int soilMoistureValue = analogRead(SOIL_MOISTURE_PIN);

  // Control water pump actuator based on soil moisture value
  if (soilMoistureValue < 500) {
    digitalWrite(WATER_PUMP_PIN, HIGH);
  } else {
    digitalWrite(WATER_PUMP_PIN, LOW);
  }

  // Control LED indicator based on temperature and humidity values
  if (temperature > 25 || humidity > 60) {
    digitalWrite(LED_PIN, HIGH);
  } else {
    digitalWrite(LED_PIN, LOW);
  }

  // Publish sensor data to MQTT broker
  client.publish(mqttTopic, "temperature=" + String(temperature) + "&humidity=" + String(humidity) + "&bmeTemperature=" + String(bmeTemperature) + "&bmeHumidity=" + String(bmeHumidity) + "&bmePressure=" + String(bmePressure) + "&soilMoisture=" + String(soilMoistureValue));

  delay(1000);  // Wait for 1 second before taking the next reading
}
